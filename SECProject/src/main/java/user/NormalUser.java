package user;

import java.io.File;
import java.io.IOException;
import java.security.Key;
import java.security.PublicKey;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.TimeUnit;
import org.ini4j.Ini;
import org.ini4j.InvalidFileFormatException;
import com.user.grpc.UserService.LocProofRep;
import com.user.grpc.UserService.LocProofReq;
import com.user.grpc.UserService.Position;
import com.user.grpc.userServiceGrpc;
import com.user.grpc.userServiceGrpc.userServiceStub;
import com.server.grpc.serverServiceGrpc;
import com.server.grpc.serverServiceGrpc.serverServiceBlockingStub;
import com.google.gson.JsonObject;
import com.server.grpc.ServerService.secureReplay;
import com.server.grpc.ServerService.secureRequest;
import io.grpc.*;
import io.grpc.stub.StreamObserver;
import crypto.RSAProvider;
import io.grpc.ManagedChannel;
import io.grpc.ManagedChannelBuilder;
import io.grpc.Server;
import io.grpc.ServerBuilder;
import shared.Point2D;
import shared.TrackerLocationSystem;

public class NormalUser extends User {
	
	//distance that user consider to see if a user is near him
	private final double closer_range_dist = 2;
	

	private int port;
	private int server_start_port;
	private int num_servers;
	
	/**************************************************************************************
	* 											-User class constructor()
	* - 
	 * @throws IOException 
	 * @throws InvalidFileFormatException 
	* 
	* ************************************************************************************/
	public NormalUser(int ID) throws Exception {
		super(ID);
		this.port = ID + Integer.parseInt("9090");
		this.server_start_port = new Ini(new File("variables.ini")).get("Server","server_start_port", Integer.class);
		this.num_servers = new Ini(new File("variables.ini")).get("Server","number_of_servers", Integer.class);
		init();
		initThreadToSndReqProof();
	}

	/**************************************************************************************
	 * 											-init()
	 * - init user server to receive proof location request in port given in the constructor
	 * and use localhost as IP
	 * 
	 * ************************************************************************************/
	private void init() {
		 Runnable r =	new Runnable() {
				@Override
				public void run() {
					Server userServer = ServerBuilder.forPort(port).addService(new UserServiceImp(getMyID(), getPRIVATE_KEY_PATH())).build();
					try {
						userServer.start();
						System.out.println("user " + myID + " server start at " + userServer.getPort());
						
						userServer.awaitTermination();
					} catch (IOException | InterruptedException e) {
						e.printStackTrace();
					}
					
				}
			};
			
			new Thread(r).start();
			
		}
	
	/**************************************************************************************
	 * 										-sndProofRequest()
	 * -send proof location request to all user in the channel(this user 
	 * 	are considered users near him). before sending each message it computes the
	 *  digital signature of the message and before considering that the user is near
	 *   or not it verifies the signature of the witness message. if it holds
	 *    then it puts the prove  the list and returns it. 
	 * 
	 * -input
	 * 		- channels: list of user channel to send location proof request
	 * 		- ID: ID of the user who pretend to proof his location
	 * 		- epoch: epoch which user want to proof his location
	 * 		- x,y: Location where user want to be prooved.
	 * @throws Exception generated by readprivatekey function in
	 * 	 rsaprovider class when the path of the private key is not found.
	 * 
	 * - return: List<string>( where each string is the proof of the witness 
	 * 	that the user is actually near him).
	 * 
	 * ************************************************************************************/
	public List<String> sndProofRequest(List<ManagedChannel> channels, int ID, int epoch, Point2D proverPos) throws Exception {

		final CountDownLatch finishLatch = new CountDownLatch(channels.size());
		List<String> proofs = new ArrayList<>();
		StreamObserver<LocProofRep> replyObserver = new StreamObserver<LocProofRep>() {
		
			@Override
			public void onNext(LocProofRep reply) {
				try {
					String witnessProof = reply.getProof();
					String witnessProofDigSig = reply.getProofDigSig();
					PublicKey witPubKey = TrackerLocationSystem.getUserPublicKey(reply.getWitnessID());
					boolean proofIsAuth = RSAProvider.istextAuthentic(witnessProof, witnessProofDigSig, witPubKey);
					if(proofIsAuth)
						proofs.add(reply.getProof());
				} catch (Exception e) {
					e.printStackTrace();
				}
				
			}

			@Override
			public void onError(Throwable t) {
				Status status = Status.fromThrowable(t);
				System.out.println("[user" + ID + "] Error: " + status);
				finishLatch.countDown();
			}

			@Override
			public void onCompleted() {
				finishLatch.countDown();
				
			}
		};
		userServiceStub userAsyncStub;
		Position.Builder pos = Position.newBuilder().setX(proverPos.getX()).setY(proverPos.getY());
		for(ManagedChannel channel : channels) {
			String sig = get_sig_of(ID +" "+ epoch +" "+ proverPos.toString());
			userAsyncStub = userServiceGrpc.newStub(channel).withDeadlineAfter(5, TimeUnit.SECONDS);
					LocProofReq req = LocProofReq.newBuilder().setProverID(ID)
									 		.setEpoch(epoch).setLoc(pos).setDigSign(sig).build();
					userAsyncStub.requestLocationProof(req, replyObserver);
		}
		finishLatch.await();
		for(ManagedChannel channel : channels)
			channel.shutdown();
		return proofs;
	}

	/**************************************************************************************
	 * 										-submitLocationReport()
	 *	- send location report to the server
	 *
	 * -input
	 * 		- proofs: list of user's proofs gathered using sndProofRequest() method
	 * 		- ID: ID of the user who report his location
	 * 		- epoch: epoch which user want to report his location
	 * 		- x,y: Location of user to report
	 *
	 * - return: List<string>( where each string is the proof of the witness
	 * 	that the user is actually near him).
	 * @throws Exception 
	 *
	 * ************************************************************************************/
	public secureReplay submitLocationReport(List<String> proofs, int ID, int epoch, Point2D position, Key sharedKey, int myNonce, int server_id) throws Exception {
		String message = proofs.toString() + "||" + epoch +"||" + myNonce; ;
		JsonObject secureMessage = getsecureMessage(server_id, message);
		String messagecipher = secureMessage.get("ciphertext").getAsString();
		String messageDigSig = secureMessage.get("textDigitalSignature").getAsString();
		
		secureReplay submitReply = null;
		ManagedChannel channel = ManagedChannelBuilder.forAddress("127.0.0.1", server_start_port+server_id)
				.usePlaintext().build();
		serverServiceBlockingStub serverStub = serverServiceGrpc.newBlockingStub(channel).withWaitForReady();

		secureRequest submitRequest = secureRequest.newBuilder().setUserID(ID)
				.setConfidentMessage(messagecipher).setMessageDigitalSignature(messageDigSig)
				.build();

		submitReply = serverStub.submitLocationReport(submitRequest);

		channel.shutdown();

		return submitReply;

	}
	
	


	
	/**************************************************************************************
	 * 											-getCloserUsers()
	 * - returns the channel of the user that are closer to him in a given epoch 
	 * in order to send them Proof Location request.
	 * 
	 *-input
	 *			-epoch: the epoch of user use to get closer users.
	 *
	 *- returns: list of users channel. 
	 * 
	 * ************************************************************************************/
	public List<ManagedChannel> getCloserUsers(int epoch) throws IOException{
		List<UserLocation> usersInEpoch = TrackerLocationSystem.getAllUsersInEpoch(epoch);
		List<ManagedChannel> closerChannel = new ArrayList<>();
		UserLocation myPosInEpoch = TrackerLocationSystem.getPosInEpoc(getMyID(), epoch);
		for(UserLocation u: usersInEpoch) {
			if(u.getUserId() != getMyID()) {
				Point2D u_point = u.getPosition();
				double dist = myPosInEpoch.getPosition().distance(u_point);
				if( dist <= closer_range_dist ) {
					ManagedChannel channel = ManagedChannelBuilder.forAddress("localhost", u.getPort()).usePlaintext().build();
					closerChannel.add(channel);
				}
			}
		}
		return closerChannel;	
	}
	
	public String proveLocation(int epoch) throws Exception {
		List<String> proofs;
		Point2D myCurrentPoosition = TrackerLocationSystem.getPosInEpoc(getMyID(), epoch).getPosition();
		List<ManagedChannel> closerChannel = getCloserUsers(epoch);
		proofs = sndProofRequest(closerChannel, getMyID(), epoch, myCurrentPoosition);
		
		//NICAS
		secureReplay serverReply = null;
		int myNonce = 0;
		for(int i = 0; i < this.num_servers; i++) {
			myNonce = new Random().nextInt();
			serverReply = submitLocationReport(proofs, getMyID(), epoch, myCurrentPoosition, getSharedKey(i), myNonce, i);
		}
		if(!serverReply.getOnError()) {
			int serverID = serverReply.getServerID();
			String[] replyFields = getfieldsFromSecureMessage(serverID, serverReply.getConfidentMessage(), serverReply.getMessageDigitalSignature());
			int serverNonce = Integer.parseInt(replyFields[1]);
			if(serverNonce != myNonce -1)
				throw new Exception("Nonce error");
			return replyFields[0];
		}else {
			throw new Exception("userID = " +getMyID()+ ": "+serverReply.getErrormessage());
		}
	}
	
	/**************************************************************************************
	 * 											-initThreadToUpdFilePos()
	 * - this procedure start a thread that will run in a loop to update the
	 *   user position in the grid file. 
	 *   before updating the user position the thread sleep between 10 to 15sec.
	 *   when thread finish to update position it send proof request to user near him.
	 *
	 * 
	 *-input
	 *
	 *- returns: void
	 * 
	 * ************************************************************************************/
	private void initThreadToSndReqProof(){
		Runnable r = new Runnable() {
			@Override
			public void run() {
			int sleepTime, myCurrentEpoch = 0;
			while(true) {
				try {
						sleepTime = (int)(Math.random()*15000 + 10000); //time to sleep between 10s-35s
						Thread.sleep(sleepTime);
						myCurrentEpoch = myCurrentEpoch%10 + 1;
						String serverReply = proveLocation(myCurrentEpoch);
						System.out.println("user ID = "+getMyID()+", server message:"+ serverReply);
						Thread.sleep(1000);
						String reply =  obtainLocationReport(myCurrentEpoch);
						System.out.println("user "+ getMyID() +" position at epoch "+ myCurrentEpoch +": "+ reply);
				} catch (Exception e) {
					System.out.println(e.getMessage());
					//e.printStackTrace();
				}
				
			}
		}
	};
		
	new Thread(r).start();
	}
	
	public String obtainLocationReport(int epoch) throws Exception {
		secureReplay rep = null;
		int myNonce = 0;

		//NICAS
		for (int i = 0; i < num_servers; i++) {
			ManagedChannel channel = ManagedChannelBuilder.forAddress("127.0.0.1", server_start_port + i)
					.usePlaintext().build();
			myNonce = new Random().nextInt();
			String message = getMyID() + "||" + epoch +"||"+myNonce;
			JsonObject cipherReq  = getsecureMessage(i, message);
			String cipherText = cipherReq.get("ciphertext").getAsString();
			String digSig = cipherReq.get("textDigitalSignature").getAsString();
			secureRequest req = secureRequest.newBuilder().setConfidentMessage(cipherText).setUserID(getMyID()).
					setMessageDigitalSignature(digSig).build();
			serverServiceBlockingStub serverStub = serverServiceGrpc.newBlockingStub(channel);
			rep = serverStub.obtainLocationReport(req);
			channel.shutdown();
		}
		if(!rep.getOnError()) {
			int serverID = rep.getServerID();
			String[] replyFields = getfieldsFromSecureMessage(serverID, rep.getConfidentMessage(), rep.getMessageDigitalSignature());
			int serverNonce = Integer.parseInt(replyFields[replyFields.length-1]);
			if(serverNonce != myNonce -1)
				throw new Exception("Nonce error");
			return replyFields[1];
		}
		else {
			throw new Exception("user "+ getMyID() + rep.getErrormessage());
		}
	}
	
	
}