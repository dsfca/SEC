package user;


import java.io.File;
import java.io.IOException;

import java.security.PublicKey;

import java.util.*;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.TimeUnit;

import org.ini4j.InvalidFileFormatException;
import com.user.grpc.UserService.LocProofRep;
import com.user.grpc.UserService.LocProofReq;
import com.user.grpc.UserService.Position;
import com.user.grpc.userServiceGrpc;
import com.user.grpc.userServiceGrpc.userServiceStub;
import com.server.grpc.serverServiceGrpc;
import com.server.grpc.ServerService.secureReplay;
import com.server.grpc.ServerService.secureRequest;
import io.grpc.*;
import io.grpc.stub.StreamObserver;
import crypto.RSAProvider;
import io.grpc.ManagedChannel;
import io.grpc.ManagedChannelBuilder;
import io.grpc.Server;
import io.grpc.ServerBuilder;
import shared.Point2D;
import shared.TrackerLocationSystem;

public class NormalUser extends User {
	
	//distance that user consider to see if a user is near him
	private final double closer_range_dist = 2;
	private boolean isByzantine = false;
	private enum MessageType {
		ObtainLocationReport,
		SubmitLocationReport,
		RequestMyProofs
	}

	private int port;

	/**************************************************************************************
	* 											-User class constructor()
	* - 
	 * @throws IOException 
	 * @throws InvalidFileFormatException 
	* 
	* ************************************************************************************/
	public NormalUser(int ID, boolean isByzantine) throws Exception {
		super(ID, "user");
		this.port = ID + Integer.parseInt("9090");
		this.isByzantine = isByzantine;
		
	}

	/**************************************************************************************
	 * 											-init()
	 * - init user server to receive proof location request in port given in the constructor
	 * and use localhost as IP
	 * 
	 * ************************************************************************************/
	public void init() {
		 Runnable r =	new Runnable() {
				@Override
				public void run() {
					Server userServer = ServerBuilder.forPort(port).addService(new UserServiceImp(getMyID(), getPRIVATE_KEY_PATH())).build();
					try {
						userServer.start();
						System.out.println("user " + getMyID() + " server start at " + userServer.getPort());
						
						userServer.awaitTermination();
					} catch (IOException | InterruptedException e) {
						e.printStackTrace();
					}
					
				}
			};
			
			new Thread(r).start();
			initThreadToSndReqProof();
		}
	
	/**************************************************************************************
	 * 										-sndProofRequest()
	 * -send proof location request to all user in the channel(this user 
	 * 	are considered users near him). before sending each message it computes the
	 *  digital signature of the message and before considering that the user is near
	 *   or not it verifies the signature of the witness message. if it holds
	 *    then it puts the prove  the list and returns it. 
	 * 
	 * -input
	 * 		- channels: list of user channel to send location proof request
	 * 		- ID: ID of the user who pretend to proof his location
	 * 		- epoch: epoch which user want to proof his location
	 * 		- x,y: Location where user want to be prooved.
	 * @throws Exception generated by readprivatekey function in
	 * 	 rsaprovider class when the path of the private key is not found.
	 * 
	 * - return: List<string>( where each string is the proof of the witness 
	 * 	that the user is actually near him).
	 * 
	 * ************************************************************************************/
	public List<String> sndProofRequest(List<ManagedChannel> channels, int ID, int epoch, Point2D proverPos) throws Exception {

		final CountDownLatch finishLatch = new CountDownLatch(channels.size());
		List<String> proofs = new ArrayList<>();
		StreamObserver<LocProofRep> replyObserver = new StreamObserver<LocProofRep>() {
		
			@Override
			public void onNext(LocProofRep reply) {
				try {
					String witnessProof = reply.getProof();
					String witnessProofDigSig = reply.getProofDigSig();
					PublicKey witPubKey = TrackerLocationSystem.getInstance().getUserPublicKey(reply.getWitnessID(), "user");
					boolean proofIsAuth = RSAProvider.istextAuthentic(witnessProof, witnessProofDigSig, witPubKey);
					if(proofIsAuth)
						proofs.add(reply.getProof());
				} catch (Exception e) {
					e.printStackTrace();
				}
				
			}

			@Override
			public void onError(Throwable t) {
				Status status = Status.fromThrowable(t);
				System.out.println("[user" + ID + "] Error: " + status);
				finishLatch.countDown();
			}

			@Override
			public void onCompleted() {
				finishLatch.countDown();
				
			}
		};
		userServiceStub userAsyncStub;
		Position.Builder pos = Position.newBuilder().setX(proverPos.getX()).setY(proverPos.getY());
		for(ManagedChannel channel : channels) {
			String sig = signMessage(ID +" "+ epoch +" "+ proverPos.toString());
			userAsyncStub = userServiceGrpc.newStub(channel).withDeadlineAfter(5, TimeUnit.SECONDS);
					LocProofReq req = LocProofReq.newBuilder().setProverID(ID)
									 		.setEpoch(epoch).setLoc(pos).setDigSign(sig).build();
					userAsyncStub.requestLocationProof(req, replyObserver);
		}
		finishLatch.await();
		for(ManagedChannel channel : channels)
			channel.shutdown().awaitTermination(10, TimeUnit.SECONDS);
		return proofs;
	}

	/**************************************************************************************
	 * 										-submitLocationReport()
	 *	- send location report to the server
	 *
	 * -input
	 * 		- proofs: list of user's proofs gathered using sndProofRequest() method
	 * 		- ID: ID of the user who report his location
	 * 		- epoch: epoch which user want to report his location
	 * 		- x,y: Location of user to report
	 *
	 * - return: True if quorum submitted a report
	 * @throws Exception 
	 *
	 * ************************************************************************************/
	public boolean submitLocationReport(List<String> proofs, int ID, int epoch, Point2D position) throws Exception {
		String message;
		if(this.isByzantine) {
			ByzantineUser byzantine = new ByzantineUser();
			message = byzantine.claming_anotherUser();
			System.out.println("************************************************byzantine user sendig message*******************************************************");
		}else
			message = proofs.toString();
		String quorumReply = asyncServerRequest(message, MessageType.SubmitLocationReport);
		return quorumReply.equals("||Your report was submitted successfully");

	}

	

	/**************************************************************************************
	 * 											-getCloserUsers()
	 * - returns the channel of the user that are closer to him in a given epoch 
	 * in order to send them Proof Location request.
	 * 
	 *-input
	 *			-epoch: the epoch of user use to get closer users.
	 *
	 *- returns: list of users channel. 
	 * 
	 * ************************************************************************************/
	public List<ManagedChannel> getCloserUsers(int epoch) throws IOException{
		List<UserLocation> usersInEpoch = TrackerLocationSystem.getAllUsersInEpoch(epoch);
		List<ManagedChannel> closerChannel = new ArrayList<>();
		UserLocation myPosInEpoch = TrackerLocationSystem.getPosInEpoc(getMyID(), epoch);
		for(UserLocation u: usersInEpoch) {
			if(u.getUserId() != getMyID()) {
				Point2D u_point = u.getPosition();
				double dist = myPosInEpoch.getPosition().distance(u_point);
				if( dist <= closer_range_dist ) {
					ManagedChannel channel = ManagedChannelBuilder.forAddress("localhost", u.getPort()).usePlaintext().build();
					closerChannel.add(channel);
				}
			}
		}
		return closerChannel;	
	}
	
	public boolean proveLocation(int epoch) throws Exception {
		List<String> proofs;
		Point2D myCurrentPoosition = TrackerLocationSystem.getPosInEpoc(getMyID(), epoch).getPosition();
		List<ManagedChannel> closerChannel = getCloserUsers(epoch);
		proofs = sndProofRequest(closerChannel, getMyID(), epoch, myCurrentPoosition);

		// Send submitReport request to all servers asynchronously
		return submitLocationReport(proofs, getMyID(), epoch, myCurrentPoosition);
	}
	
	/**************************************************************************************
	 * 											-initThreadToUpdFilePos()
	 * - this procedure start a thread that will run in a loop to update the
	 *   user position in the grid file. 
	 *   before updating the user position the thread sleep between 10 to 15sec.
	 *   when thread finish to update position it send proof request to user near him.
	 *
	 * 
	 *-input
	 *
	 *- returns: void
	 * 
	 * ************************************************************************************/
	private void initThreadToSndReqProof(){
		Runnable r = new Runnable() {
			@Override
			public void run() {
			int sleepTime, myCurrentEpoch = 0;
			while(true) {
				try {
						sleepTime = (int)(Math.random()*15000 + 15000); //time to sleep between 15s-30s
						Thread.sleep(sleepTime);
						myCurrentEpoch = myCurrentEpoch%10 + 1;

						boolean submitStatus = proveLocation(myCurrentEpoch);
						if (submitStatus) System.out.println("user ID = "+getMyID()+", report submitted");
						else System.out.println("user ID = "+getMyID()+", report was NOT submitted");

						Thread.sleep(1000);
						String reply =  obtainLocationReport(myCurrentEpoch);
						System.out.println("user: "+ getMyID() +" position at epoch "+ myCurrentEpoch +": "+ reply);
				} catch (Exception e) {
					System.out.println(e.getMessage());
					//e.printStackTrace();
				}
				
			}
		}
	};
		
	new Thread(r).start();
	}
	
	public String obtainLocationReport(int epoch) throws Exception {

		String message = String.valueOf(epoch);
		return asyncServerRequest(message, MessageType.ObtainLocationReport);

	}

	public String requestMyProofs(Set<Integer> epochSet) throws Exception {

		String epochs = epochSet.toString().replaceAll("\\[|\\]","")
										   .replaceAll(", ",";");

		String message = getMyID() + "||" + epochs;
		return asyncServerRequest(message, MessageType.RequestMyProofs);

	}

	private String asyncServerRequest(String message, MessageType type) throws Exception {
        List<Integer> nonces = new ArrayList<>();
        Map<String, Integer> readvals = new HashMap<>();
        Set<Integer> replied = new HashSet<>();
        int num_servers = TrackerLocationSystem.getInstance().getNumServers();
        final CountDownLatch finishLatch = new CountDownLatch(num_servers);
        StreamObserver<secureReplay> acksObserver = new StreamObserver<secureReplay>() {
            @Override
            public void onNext(secureReplay secureReplay) {
                int serverId = secureReplay.getServerID();
                if (replied.contains(serverId))
					return;

                // Get Nonce from the message
                String[] replyFields = new String[0];
                try {
					replyFields = getfieldsFromSecureMessage(serverId,
							secureReplay.getConfidentMessage(), secureReplay.getMessageDigitalSignature());
				} catch (Exception e) {
					System.out.println(e.getMessage());
					return;
				}

                replied.add(serverId);
                finishLatch.countDown();

                // Validate nonce
                int serverNonce = Integer.parseInt(replyFields[replyFields.length-1]);
				if(serverNonce != nonces.get(serverId)-1) {
					System.out.println("[user" + getMyID() + "] Submit Report Error: Unexpected nonce");
					return;
				}

				// Compose plaintext message
                String response = "";
				for (int i = 0; i < replyFields.length-1; ++i)
				    response += "||" + replyFields[i];

                if (!readvals.containsKey(response)) {
                    readvals.put(response, 1);
                    //return;
                }

                readvals.put(response, readvals.get(response) + 1);
                if(type.equals(MessageType.ObtainLocationReport))
                	putValuesOnAnswers(serverId, response);
            }

            @Override
            public void onError(Throwable t) {
                Status status = Status.fromThrowable(t);
				System.out.println("[User" + getMyID() + "] Error: " + status);
				finishLatch.countDown();
            }

            @Override
            public void onCompleted() { }
        };

        List<ManagedChannel> serverChannels = new ArrayList<>();
		serverServiceGrpc.serverServiceStub serverAsyncStub;

		String signedMessage = signMessage(message);
		int myNonce = hashCash(message);
        for(int server_id = 0; server_id < num_servers; server_id++) {
//            int myNonce = new Random().nextInt();
            nonces.add(myNonce);

//            JsonObject secureMessage = getsecureMessage(server_id, message + "||" + myNonce);
//            String messagecipher = secureMessage.get("ciphertext").getAsString();
//			String messageDigSig = secureMessage.get("textDigitalSignature").getAsString();

			String encryptedMessage = encryptMessage(server_id, message + "||" + getMyListenerPort() + "||" + myNonce);
			int serverPort = TrackerLocationSystem.getInstance().getMyServerPort(server_id);
			ManagedChannel channel = ManagedChannelBuilder.forAddress("127.0.0.1", serverPort)
					                       .usePlaintext().build();
			serverChannels.add(channel); // Store it for a proper close later
			serverAsyncStub = serverServiceGrpc.newStub(channel).withDeadlineAfter(10, TimeUnit.SECONDS)
																.withWaitForReady();

			secureRequest request = secureRequest.newBuilder().setUserID(getMyID())
													  				.setConfidentMessage(encryptedMessage)
													  				.setMessageDigitalSignature(signedMessage).build();
			if (type == MessageType.ObtainLocationReport) {
			    serverAsyncStub.obtainLocationReport(request, acksObserver);
            } else if (type == MessageType.SubmitLocationReport) {
			    serverAsyncStub.submitLocationReport(request, acksObserver);
            } else if (type == MessageType.RequestMyProofs) {
				serverAsyncStub.requestMyProofs(request, acksObserver);
			}
			else {
			    throw new Exception("Unknown message type.");
            }
        }

        // Wait for all replies (both errors and ok)
		finishLatch.await();

        // Close channels
		for(ManagedChannel ch : serverChannels)
			ch.shutdown().awaitTermination(10, TimeUnit.SECONDS);

        // There is more than quorum of returned messages, find the most common
        Integer max = 0;
		String consensus = "";
		int cnt = 0;
		for (Map.Entry<String, Integer> entry : readvals.entrySet()) {
			cnt += entry.getValue();
			if (entry.getValue() > max) {
				max = entry.getValue();
				consensus = entry.getKey();
			}
		}
		if (cnt <= quorum && !type.equals(MessageType.ObtainLocationReport))
			throw new Exception("Not enough answers.");
		
		if(type.equals(MessageType.ObtainLocationReport))
			return readAtomicValue(getMyID(), Integer.parseInt(message));
		if(type.equals(MessageType.SubmitLocationReport)) {
			ByzantineUser.storeProof(message + "\n");
		}
        return consensus;
    }
	
	
}